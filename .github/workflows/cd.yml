name: CD

on:
  push:
    branches: [ main ]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install dependencies
      run: |
        echo "Installing dependencies with pnpm..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "pnpm-lock.yaml exists: $(test -f pnpm-lock.yaml && echo 'YES' || echo 'NO')"
        pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
        echo "Dependencies installed successfully"

    - name: Build application
      run: pnpm run build

    - name: Build and push Docker image
      run: |
        docker build -t authpractice:staging .
        echo "Staging deployment completed"
        # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install dependencies
      run: |
        echo "Installing dependencies with pnpm..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "pnpm-lock.yaml exists: $(test -f pnpm-lock.yaml && echo 'YES' || echo 'NO')"
        pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
        echo "Dependencies installed successfully"

    - name: Build application
      run: pnpm run build

    - name: Build and push Docker image
      run: |
        docker build -t authpractice:production .
        echo "Production deployment completed"
        # Add your production deployment commands here 