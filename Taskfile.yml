version: '3'

vars:
  IMAGE_NAME: authpractice
  IMAGE_TAG: '{{.IMAGE_TAG | default "latest"}}'
  CLUSTER_NAME: authpractice-cluster

tasks:
  dev:
    desc: Start development server
    dir: apps/web
    cmds:
      - pnpm install
      - pnpm dev

  install:
    desc: Install dependencies
    dir: apps/web
    cmds:
      - pnpm install

  build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.IMAGE_NAME}}:{{.IMAGE_TAG}} apps/web/

  setup:
    desc: Set up development environment
    cmds:
      - task install
      - echo "âœ… Setup complete! Run 'task dev' to start development"

  docker-clean:
    desc: Clean up Docker resources
    cmds:
      - docker stop $(docker ps -a -q --filter "name=authpractice") 2>/dev/null || true
      - docker rm $(docker ps -a -q --filter "name=authpractice") 2>/dev/null || true
      - docker rmi $(docker images -q --filter "reference=authpractice*") 2>/dev/null || true
      - docker system prune -f

  docker-prune:
    desc: Prune all unused Docker resources
    cmds:
      - docker system prune -a -f

  k8s-deploy:
    desc: Deploy to Kubernetes
    deps: [build]
    cmds:
      - docker save {{.IMAGE_NAME}}:{{.IMAGE_TAG}} | k3d image import - {{.CLUSTER_NAME}}
      - kubectl set image deployment/authpractice authpractice={{.IMAGE_NAME}}:{{.IMAGE_TAG}} || true
      - kubectl rollout restart deployment/authpractice || true

  k8s-port-forward:
    desc: Show port-forward commands for services
    cmds:
      - |
        echo "Run these in separate terminals:"
        echo "kubectl port-forward -n istio-system svc/istio-ingressgateway 8080:80"
        echo "kubectl port-forward -n argocd svc/argocd-server 8081:80"

  k8s-logs:
    desc: Show application logs
    cmds:
      - kubectl logs -f deployment/authpractice -n default || kubectl logs -f deployment/authpractice-development -n authpractice-development

  k8s-status:
    desc: Show Kubernetes status
    cmds:
      - kubectl get pods -A | grep authpractice
      - kubectl get services -A | grep authpractice

  gitops-sync:
    desc: Sync ArgoCD applications
    cmds:
      - argocd app sync authpractice-development --insecure || echo "Development app sync failed"
      - argocd app sync authpractice-production --insecure || echo "Production app sync failed"

  db-connect:
    desc: Connect to PostgreSQL database
    cmds:
      - kubectl port-forward -n postgresql svc/postgresql 5432:5432 &

  test:
    desc: Run tests
    dir: apps/web
    cmds:
      - pnpm test

  lint:
    desc: Run linting
    dir: apps/web
    cmds:
      - pnpm lint

  type-check:
    desc: Run TypeScript type checking
    dir: apps/web
    cmds:
      - pnpm tsc --noEmit

  db-init:
    desc: Initialize database schema
    dir: apps/web
    cmds:
      - pnpm db:init

  clean:
    desc: Clean up project
    cmds:
      - rm -rf apps/web/node_modules
      - rm -rf apps/web/.next
      - docker system prune -f

  help:
    desc: Show available tasks
    cmds:
      - task --list-all